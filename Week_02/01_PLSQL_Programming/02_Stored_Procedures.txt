Scenario 1: The bank needs to process monthly interest for all savings accounts.

Question: Write a stored procedure ProcessMonthlyInterest that calculates and updates the balance of all savings accounts by applying an interest rate of 1% to the current balance.

Solution:

      CREATE TABLE savings_accounts (
          account_id   NUMBER PRIMARY KEY,
          customer_name VARCHAR2(100),
          balance       NUMBER(10, 2)
      );

      INSERT ALL
          INTO savings_accounts VALUES (1, 'John Doe', 10000.00)
          INTO savings_accounts VALUES (2, 'Alice Smith', 5000.00)
          INTO savings_accounts VALUES (3, 'Ravi Kumar', 20000.00)
          INTO savings_accounts VALUES (4, 'Meena Patel', 1500.00)
          INTO savings_accounts VALUES (5, 'George Mathew', 8000.00)
      SELECT * FROM dual;

      create procedure ProcessMonthlyInterest 
      is
          cursor c1 is 
          select * from savings_accounts;
          updated_bal Number(10, 2);
      begin
          for row_data in c1
          loop
              updated_bal := row_data.balance + (0.01 * row_data.balance);
              update savings_accounts
              set balance = updated_bal
              where account_id = row_data.account_id;
          end loop;
      end;

      begin 
          ProcessMonthlyInterest();
      end;

      select * from savings_accounts;


Scenario 2: The bank wants to implement a bonus scheme for employees based on their performance.

Question: Write a stored procedure UpdateEmployeeBonus that updates the salary of employees in a given department by adding a bonus percentage passed as a parameter.

Solution:

      CREATE TABLE employees (
          emp_id      NUMBER PRIMARY KEY,
          name        VARCHAR2(100),
          department  VARCHAR2(50),
          salary      NUMBER(10, 2)
      );

      drop table employees;

      INSERT ALL
          INTO employees VALUES (1, 'John Doe', 'HR', 50000.00)
          INTO employees VALUES (2, 'Alice Smith', 'IT', 70000.00)
          INTO employees VALUES (3, 'Ravi Kumar', 'Sales', 55000.00)
          INTO employees VALUES (4, 'Meena Patel', 'IT', 60000.00)
          INTO employees VALUES (5, 'George Mathew', 'HR', 52000.00)
      SELECT * FROM dual;

      select * from employees;

      create or replace procedure UpdateEmployeeBonus (
          dept_name in VARCHAR2,
          bonus in number
      ) is
      begin
          update employees
          set salary = (salary + (salary * bonus / 100))
          where department = dept_name;
      end;

      begin
          UpdateEmployeeBonus('IT', 10);
      end;


Scenario 3: Customers should be able to transfer funds between their accounts.

Question: Write a stored procedure TransferFunds that transfers a specified amount from one account to another, checking that the source account has sufficient balance before making the transfer.

Solution:

      CREATE TABLE accounts (
          account_id    NUMBER PRIMARY KEY,
          customer_name VARCHAR2(100),
          balance       NUMBER(10, 2)
      );

      INSERT ALL
          INTO accounts VALUES (101, 'John Doe', 10000.00)
          INTO accounts VALUES (102, 'Alice Smith', 7500.00)
          INTO accounts VALUES (103, 'Ravi Kumar', 5000.00)
          INTO accounts VALUES (104, 'Meena Patel', 12000.00)
          INTO accounts VALUES (105, 'George Mathew', 3000.00)
      SELECT * FROM dual;


      select * from accounts;

      create or replace procedure TransferFunds (
          src_acc in number,
          des_acc in number,
          amount in number
      )
      is
      src_bal number;
      begin
          select balance into src_bal from accounts
          where account_id = src_acc;

          if(src_bal < amount) then
              dbms_output.put_line('Insufficient balance');
          end if;

          update accounts
          set balance = balance + amount
          where account_id = des_acc;

          update accounts
          set balance = balance - amount
          where account_id = src_acc;
      end;

      begin
          TransferFunds(101, 102, 5000);
      end;